import connectDB from '@/lib/database/mongodb';
import { File, saveNotification } from '@/lib/database/models';
import { logAdminAction } from '@/lib/audit/audit-service';
import type { ExpirationNotificationStats } from '@/types';

export interface ExpirationNotificationOptions {
  // Notify files expiring within this time period (hours)
  notifyWithinHours?: number;
  // Don't send notifications for files expiring in less than this (hours)
  minHoursUntilExpiry?: number;
  // Maximum notifications to send in one batch
  maxNotifications?: number;
}

class ExpirationNotificationService {
  private readonly defaultOptions: Required<ExpirationNotificationOptions> = {
    notifyWithinHours: 24, // Notify 24 hours before expiration
    minHoursUntilExpiry: 1, // Don't notify if less than 1 hour left
    maxNotifications: 50,
  };

  /**
   * Check for files expiring soon and send notifications
   */
  async notifyExpiringFiles(
    options: ExpirationNotificationOptions = {}
  ): Promise<ExpirationNotificationStats> {
    const opts = { ...this.defaultOptions, ...options };
    
    try {
      await connectDB();

      const now = new Date();
      const notifyAfter = new Date(now.getTime() + opts.minHoursUntilExpiry * 60 * 60 * 1000);
      const notifyBefore = new Date(now.getTime() + opts.notifyWithinHours * 60 * 60 * 1000);

      // Find files that:
      // 1. Are not deleted
      // 2. Will expire within the notification window
      // 3. Haven't been notified about expiration recently
      const expiringFiles = await File.find({
        isDeleted: false,
        expiresAt: {
          $gt: notifyAfter, // More than minHoursUntilExpiry away
          $lt: notifyBefore, // Less than notifyWithinHours away
        },
        // Only for authenticated users (has userId)
        userId: { $exists: true, $ne: null },
      })
        .limit(opts.maxNotifications)
        .lean();

      const stats: ExpirationNotificationStats = {
        checked: expiringFiles.length,
        notificationsSent: 0,
        errors: [],
      };

      console.log(`üïê Checking ${expiringFiles.length} files for expiration notifications`);

      for (const file of expiringFiles) {
        try {
          // Check if we've already sent a notification for this file recently
          const existingNotification = await connectDB().then(() => 
            require('@/lib/database/models').Notification.findOne({
              userId: file.userId,
              type: 'file_expired_soon',
              'metadata.fileId': file._id.toString(),
              createdAt: {
                // Don't send again if we notified in the last 12 hours
                $gt: new Date(now.getTime() - 12 * 60 * 60 * 1000)
              }
            })
          );

          if (existingNotification) {
            console.log(`‚è≠Ô∏è Skipping notification for file ${file.filename} - already notified recently`);
            continue;
          }

          const hoursUntilExpiry = Math.round(
            (new Date(file.expiresAt).getTime() - now.getTime()) / (60 * 60 * 1000)
          );          // Create notification
          await saveNotification({
            userId: file.userId!, // We know it exists from the query
            type: 'file_expired_soon',
            title: 'File Expiring Soon',
            message: `Your file "${file.originalName || file.filename}" will expire in ${hoursUntilExpiry} hours. Download it before it's permanently deleted.`,
            priority: hoursUntilExpiry <= 2 ? 'high' : 'normal',
            relatedFileId: file._id.toString(),
            actionUrl: `/s/${file.shortUrl}`,
            actionLabel: 'Download Now',
            metadata: {
              fileId: file._id.toString(),
              filename: file.originalName || file.filename,
              expiresAt: file.expiresAt,
              hoursUntilExpiry,
              fileSize: file.size,
              autoGenerated: true,
            },
          });

          stats.notificationsSent++;
          console.log(`üìß Sent expiration notification for file ${file.filename} (expires in ${hoursUntilExpiry}h)`);

        } catch (error) {
          const errorMsg = `Failed to send notification for file ${file.filename}: ${error instanceof Error ? error.message : 'Unknown error'}`;
          console.error(errorMsg);
          stats.errors.push(errorMsg);
        }
      }

      // Log admin action for monitoring
      if (stats.notificationsSent > 0) {        await logAdminAction(
          'system',
          'expiration_notifications_sent',
          `Sent ${stats.notificationsSent} expiration notifications`,
          'system'
        );
      }

      console.log(`‚úÖ Expiration notification check complete: ${stats.notificationsSent}/${stats.checked} notifications sent`);
      return stats;

    } catch (error) {
      console.error('Error in expiration notification service:', error);
      throw new Error(`Expiration notification service failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Get files that will expire soon (for admin monitoring)
   */
  async getExpiringFilesStats(options: ExpirationNotificationOptions = {}) {
    const opts = { ...this.defaultOptions, ...options };
    
    try {
      await connectDB();

      const now = new Date();
      const notifyBefore = new Date(now.getTime() + opts.notifyWithinHours * 60 * 60 * 1000);

      const [total, authenticated, anonymous] = await Promise.all([
        File.countDocuments({
          isDeleted: false,
          expiresAt: { $lt: notifyBefore },
        }),
        File.countDocuments({
          isDeleted: false,
          expiresAt: { $lt: notifyBefore },
          userId: { $exists: true, $ne: null },
        }),
        File.countDocuments({
          isDeleted: false,
          expiresAt: { $lt: notifyBefore },
          userId: { $exists: false },
        }),
      ]);

      return {
        total,
        authenticated,
        anonymous,
        notificationEligible: authenticated, // Only authenticated users get notifications
      };
    } catch (error) {
      console.error('Error getting expiring files stats:', error);
      throw error;
    }
  }
}

// Export singleton instance
export const expirationNotificationService = new ExpirationNotificationService();

// Export class for testing
export { ExpirationNotificationService };
